function(metatron_evaluate unit path mode)
  message(STATUS "evaluate ${unit} ...")
  set(target metatron-${unit})

  # collect sources
  if(${mode} STREQUAL "lib")
    message(STATUS "build 3rd-party library ${target}")
    add_library(${target} INTERFACE)
  else()
    file(GLOB_RECURSE sources ${path}/*.cpp)
    file(GLOB_RECURSE headers ${path}/include/metatron/${unit}/*.hpp)
    if(sources)
      if(${mode} STREQUAL "exe")
        message(STATUS "build executable ${target}")
        add_executable(${target} ${sources})
      else()
        message(STATUS "build library ${target}")
        add_library(${target} SHARED EXCLUDE_FROM_ALL ${sources})
      endif()
      target_include_directories(${target} PUBLIC ${path}/include)
    elseif(${mode} STREQUAL "src")
      if(headers)
        message(STATUS "build header-only library ${target}")
      else()
        message(STATUS "build interface library ${target}")
      endif()
      add_library(${target} INTERFACE)
      target_include_directories(${target} INTERFACE ${path}/include)
      set(mode "lib")
    else()
      message(FATAL_ERROR "sources not found")
    endif()
  endif()

  # execute setup file
  set(metatron-deps)
  set(setup-file ${path}/setup.cmake)
  if(EXISTS ${setup-file})
    include(${setup-file})
  endif()

  # solve dependencies
  set(linked-libs)
  set(included-libs)
  foreach(dep ${metatron-deps})
    if(${mode} STREQUAL "lib")
      list(APPEND linked-libs ${dep})
    else()
      list(APPEND linked-libs metatron-${dep})
    endif()
  endforeach()

  # link dependencies
  if(linked-libs)
    message(STATUS "${target} link libraries ${linked-libs}")
    if(${mode} STREQUAL "lib")
      target_link_libraries(${target} INTERFACE ${linked-libs})
    else()
      target_link_libraries(${target} PUBLIC ${linked-libs})
    endif()
  endif()
endfunction()

function(metatron_classify path mode)
  if (IS_DIRECTORY ${path})
    file(GLOB units RELATIVE ${path} ${path}/*)
    foreach(unit ${units})
      if(IS_DIRECTORY ${path}/${unit})
        metatron_evaluate(${unit} ${path}/${unit} ${mode})
      endif()
    endforeach()
  endif()
endfunction()
