function(unite units)
	get_property(metatron-units TARGET metatron-build PROPERTY metatron-units)
	list(APPEND metatron-units ${units})
	set_property(TARGET metatron-build PROPERTY metatron-units ${metatron-units})
endfunction()

function(extend exts)
	foreach(ext ${exts})
		find_package(${ext} REQUIRED)
	endforeach()

	get_property(metatron-exts TARGET metatron-build PROPERTY metatron-exts)
	list(APPEND metatron-exts ${exts})
	set_property(TARGET metatron-build PROPERTY metatron-exts ${metatron-exts})
endfunction()

function(modulo path)
	list(APPEND CMAKE_MODULE_PATH ${path})
	set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} PARENT_SCOPE)
	file(GLOB mods ${path}/Find*.cmake)

	get_property(metatron-mods TARGET metatron-build PROPERTY metatron-mods)
	list(APPEND metatron-mods ${mods})
	set_property(TARGET metatron-build PROPERTY metatron-mods ${metatron-mods})
endfunction()

function(evaluate unit path mode)
	set(target metatron-${unit})

	# collect sources
	if(${mode} STREQUAL "ext")
		if (EXISTS ${path}/src)
			message(STATUS "build external source library ${target}")
			add_library(${target} SHARED)
			set(mode "lib")
		else()
			message(STATUS "build external library ${target}")
			add_library(${target} INTERFACE)
		endif()
	else()
		file(GLOB_RECURSE sources ${path}/*.cpp)
		file(GLOB_RECURSE headers ${path}/include/metatron/${unit}/*.hpp)
		if(sources)
			if(${mode} STREQUAL "exe")
				message(STATUS "build executable ${target}")
				add_executable(${target})
			else()
				message(STATUS "build library ${target}")
				add_library(${target} SHARED EXCLUDE_FROM_ALL)
			endif()
			target_sources(${target} PRIVATE ${sources})
			target_include_directories(
				${target} PUBLIC
				$<BUILD_INTERFACE:${path}/include>
				$<INSTALL_INTERFACE:include/${target}>
			)
		elseif(${mode} STREQUAL "src")
			add_library(${target} INTERFACE)
			set(mode "inc")
			if(headers)
				message(STATUS "build header-only library ${target}")
				target_include_directories(
					${target} INTERFACE
					$<BUILD_INTERFACE:${path}/include>
					$<INSTALL_INTERFACE:include/${target}>
				)
			else()
				message(STATUS "build interface library ${target}")
			endif()
		else()
			message(FATAL_ERROR "sources not found")
		endif()
	endif()

	set_property(TARGET ${target} PROPERTY metatron-path ${path})
	set_property(TARGET ${target} PROPERTY metatron-mode ${mode})
	if(${mode} STREQUAL "ext" OR ${mode} STREQUAL "inc")
		set_property(TARGET ${target} PROPERTY metatron-access INTERFACE)
	else()
		set_property(TARGET ${target} PROPERTY metatron-access PUBLIC)
	endif()
endfunction()

function(solve path mode)
	message(STATUS "processing ${mode}...")
	if (IS_DIRECTORY ${path})
		file(GLOB units RELATIVE ${path} ${path}/*)
		set(build-units)

		foreach(unit ${units})
			if(IS_DIRECTORY ${path}/${unit})
				list(APPEND build-units ${unit})
				evaluate(${unit} ${path}/${unit} ${mode})
			endif()
		endforeach()
		
		unite("${build-units}")
	endif()
endfunction()

function(collect)
	solve(${CMAKE_CURRENT_LIST_DIR}/ext "ext")
	solve(${CMAKE_CURRENT_LIST_DIR}/src "src")
	solve(${CMAKE_CURRENT_LIST_DIR}/exe "exe")
endfunction()
